# app/routes/moods.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
import models
import schemas

router = APIRouter(prefix="/moods", tags=["Moods"])

# CREATE a mood
@router.post("/", response_model=schemas.MoodResponse, status_code=status.HTTP_201_CREATED)
def create_mood(mood: schemas.MoodCreate, db: Session = Depends(get_db)):
    """
    Create a new mood.
    Checks if a mood with the same name already exists.
    """
    # Check if mood already exists
    db_mood = db.query(models.Mood).filter(models.Mood.name == mood.name).first()
    if db_mood:
        raise HTTPException(status_code=400, detail="Mood with this name already exists")

    # Create the new mood instance
    # ID will be auto-generated by the database
    db_mood = models.Mood(name=mood.name)

    db.add(db_mood)
    db.commit()
    db.refresh(db_mood)
    return db_mood


# READ all moods
@router.get("/", response_model=list[schemas.MoodResponse])
def get_all_moods(db: Session = Depends(get_db)):
    """
    Retrieve all moods from the database.
    """
    return db.query(models.Mood).all()


# READ a specific mood by ID
@router.get("/{mood_id}", response_model=schemas.MoodResponse)
def get_mood(mood_id: int, db: Session = Depends(get_db)):
    """
    Retrieve a specific mood by its ID.
    """
    mood = db.query(models.Mood).filter(models.Mood.id == mood_id).first()
    if not mood:
        raise HTTPException(status_code=404, detail="Mood not found")
    return mood


# UPDATE a mood (Rename)
@router.put("/{mood_id}", response_model=schemas.MoodResponse)
def update_mood(mood_id: int, mood_update: schemas.MoodUpdate, db: Session = Depends(get_db)):
    """
    Update the name of an existing mood.
    Checks if the new name already exists for another mood.
    """
    # Find the mood to update
    mood = db.query(models.Mood).filter(models.Mood.id == mood_id).first()
    if not mood:
        raise HTTPException(status_code=404, detail="Mood not found")

    # Check if the new name conflicts with an existing mood (excluding the current mood)
    existing_mood = db.query(models.Mood).filter(models.Mood.name == mood_update.name, models.Mood.id != mood_id).first()
    if existing_mood:
        raise HTTPException(status_code=400, detail="Mood with this name already exists")

    # Update the mood name
    mood.name = mood_update.name

    db.commit()
    db.refresh(mood)
    return mood


# DELETE a mood
@router.delete("/{mood_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_mood(mood_id: int, db: Session = Depends(get_db)):
    """
    Delete a mood by its ID.
    Note: Deleting a mood will also remove its associations in the song_mood_association table
    due to the foreign key constraints with ON DELETE CASCADE.
    """
    # Find the mood to delete
    mood = db.query(models.Mood).filter(models.Mood.id == mood_id).first()
    if not mood:
        raise HTTPException(status_code=404, detail="Mood not found")

    db.delete(mood)
    db.commit()
    # No content returned for 204 status
    return