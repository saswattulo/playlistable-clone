# app/routes/contexts.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
import models
import schemas

router = APIRouter(prefix="/contexts", tags=["Contexts"])

# CREATE a context
@router.post("/", response_model=schemas.ContextResponse, status_code=status.HTTP_201_CREATED)
def create_context(context: schemas.ContextCreate, db: Session = Depends(get_db)):
    """
    Create a new context.
    Checks if a context with the same name already exists.
    """
    # Check if context already exists
    db_context = db.query(models.Context).filter(models.Context.name == context.name).first()
    if db_context:
        raise HTTPException(status_code=400, detail="Context with this name already exists")

    # Create the new context instance
    # ID will be auto-generated by the database
    db_context = models.Context(name=context.name, description=context.description)

    db.add(db_context)
    db.commit()
    db.refresh(db_context)
    return db_context


# READ all contexts
@router.get("/", response_model=list[schemas.ContextResponse])
def get_all_contexts(db: Session = Depends(get_db)):
    """
    Retrieve all contexts from the database.
    """
    return db.query(models.Context).all()


# READ a specific context by ID
@router.get("/{context_id}", response_model=schemas.ContextResponse)
def get_context(context_id: int, db: Session = Depends(get_db)):
    """
    Retrieve a specific context by its ID.
    """
    context = db.query(models.Context).filter(models.Context.id == context_id).first()
    if not context:
        raise HTTPException(status_code=404, detail="Context not found")
    return context


# UPDATE a context
@router.put("/{context_id}", response_model=schemas.ContextResponse)
def update_context(context_id: int, context_update: schemas.ContextUpdate, db: Session = Depends(get_db)):
    """
    Update the name and/or description of an existing context.
    Checks if the new name already exists for another context.
    """
    # Find the context to update
    context = db.query(models.Context).filter(models.Context.id == context_id).first()
    if not context:
        raise HTTPException(status_code=404, detail="Context not found")

    # Check if name is being updated
    if context_update.name is not None:
        # Check if the new name conflicts with an existing context (excluding the current context)
        existing_context = db.query(models.Context).filter(
            models.Context.name == context_update.name, 
            models.Context.id != context_id
        ).first()
        if existing_context:
            raise HTTPException(status_code=400, detail="Context with this name already exists")
        
        # Update the context name
        context.name = context_update.name
    
    # Update description if provided
    if context_update.description is not None:
        context.description = context_update.description

    db.commit()
    db.refresh(context)
    return context


# DELETE a context
@router.delete("/{context_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_context(context_id: int, db: Session = Depends(get_db)):
    """
    Delete a context by its ID.
    Note: Deleting a context will also remove its associations in the song_context_association table
    due to the foreign key constraints with ON DELETE CASCADE.
    """
    # Find the context to delete
    context = db.query(models.Context).filter(models.Context.id == context_id).first()
    if not context:
        raise HTTPException(status_code=404, detail="Context not found")

    db.delete(context)
    db.commit()
    # No content returned for 204 status
    return